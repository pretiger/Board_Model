<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/security/util http://www.springframework.org/schema/security/util/spring-util.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.3.xsd">

    <!-- 정적 리소스 파일들에는 보안설정을 하지 않음 -->
    <http pattern="/include/**" security="none" />
   	<http pattern="/favicon.ico" security="none" />
    <http auto-config="true" use-expressions="true" create-session="never">
    	<!-- csrf적용하지 않을 경우 true -->
    	<!-- <csrf disabled="true"/> -->
	    <!-- 관리자 영역 설정 -->
   		<intercept-url pattern="/admin/**" access="hasRole('ROLE_ADMIN')" />
    	<!-- 권한에 관계없이 접속 가능한 영역(guest도 접속 가능) -->
    	<intercept-url pattern="/" access="permitAll" />
    	<intercept-url pattern="/auth/**" access="permitAll" />
    	<!-- 로그인한 사용자 영역 -->
    	<intercept-url pattern="/**" 
    		access="hasAnyRole('ROLE_USER', 'ROLE_TEST', 'ROLE_ADMIN', 'ROLE_GUEST')" />
    	<!-- 로그인 폼 -->
    	<form-login login-page="/auth/loginForm"
                        login-processing-url="/auth/login"
                        authentication-success-handler-ref="userLoginSuccessHandler"
                        authentication-failure-handler-ref="userLoginFailureHandler"
                        username-parameter="username" password-parameter="password" />
    	<!-- 세션 관련 설정, max-sessions="1" 동시접속막기, expired-url="/auth/login" 세션 만료시 이동할 주소, -->
     	<session-management>
   			<concurrency-control max-sessions="1"
            	                           expired-url="/auth/login"
                	              		   error-if-maximum-exceeded="true" />
    	</session-management>
    	
    	<access-denied-handler ref="userDeniedHandler" />
    </http>
    <beans:bean id="userDeniedHandler" class="com.sample.security.authentication.UserDeniedHandler" />
    <beans:bean id="userLoginSuccessHandler" class="com.sample.security.authentication.UserLoginSuccessHandler" />
    <beans:bean id="userLoginFailureHandler" class="com.sample.security.authentication.UserLoginFailureHandler" />
    <!-- 로그인 인증을 처리하는 빈 -->
    <beans:bean class="com.sample.security.authentication.UserAuthenticationService"/>
    <!-- 비밀번호 암호화를 위한 빈 -->
     <beans:bean id="bcryptPasswordEncoder" 
    	class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />

</beans:beans>
